KUBERNETES STATEFULSETS - DETAILED EXPLANATION

1. What is a StatefulSet?
-------------------------
- A StatefulSet is a Kubernetes workload object designed to manage stateful applications.
- Unlike Deployments (for stateless apps), StatefulSets handle applications requiring:
  - Stable, unique network identifiers
  - Stable, persistent storage
  - Ordered, predictable Pod creation and scaling
  - Ordered and safe rolling updates

2. Key Features
---------------
- Stable Network Identity: Each Pod gets a predictable DNS name (e.g., web-0, web-1).
- Persistent Storage: Each Pod can use its own PersistentVolumeClaim (PVC) that remains even if the Pod is rescheduled.
- Ordered Deployment and Scaling: Pods are created in sequential order (0, 1, 2...), and terminated in reverse order.
- Ordered Rolling Updates: Updates occur in sequence, ensuring safe transitions without breaking consistency.

3. YAML Example of a StatefulSet
--------------------------------
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
spec:
  serviceName: "nginx"
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.25
        ports:
        - containerPort: 80
  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi

Explanation:
- serviceName: Must point to a headless service (ClusterIP: None) for stable DNS.
- replicas: Number of Pods (3 here).
- template: Defines the Pod template (like a Pod spec).
- volumeClaimTemplates: Each Pod gets its own unique PVC (www-web-0, www-web-1, etc).

4. Lifecycle
------------
1. You create or update a StatefulSet YAML.
2. Kubernetes creates Pods sequentially (e.g., web-0 first).
3. Each Pod gets a unique, stable hostname and PVC.
4. Scaling up creates new Pods in order.
5. Scaling down deletes Pods in reverse order.

5. Commands to Work with StatefulSets
-------------------------------------
# Create StatefulSet
kubectl apply -f statefulset.yaml

# Get StatefulSets
kubectl get statefulsets

# Describe details
kubectl describe statefulset web

# Scale StatefulSet
kubectl scale statefulset web --replicas=5

# Delete StatefulSet but retain PVCs
kubectl delete statefulset web --cascade=orphan

6. Use Cases
------------
- Databases (MySQL, PostgreSQL, MongoDB).
- Messaging systems (Kafka, RabbitMQ, Zookeeper).
- Applications requiring persistent, per-Pod storage.

7. Comparison with Deployment
-----------------------------
Feature                  | Deployment          | StatefulSet
--------------------------|---------------------|-------------------------
Pod identity             | Random              | Stable (pod-0, pod-1)
Storage                  | Shared/ephemeral    | Unique PVC per Pod
Scaling order            | Random              | Sequential
Rolling updates          | Parallel/fast       | Ordered/controlled
Use case                 | Stateless apps      | Stateful apps

8. Summary
----------
- Use Deployment for stateless workloads (web servers, APIs).
- Use StatefulSet for stateful workloads (databases, distributed systems).
- StatefulSets ensure stability, identity, and persistence â€” critical for apps that need consistent data handling.

------------------------------------------------------
