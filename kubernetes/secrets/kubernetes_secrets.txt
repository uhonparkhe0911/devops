Kubernetes Secrets in Detail

🔑 What is a Secret?
Kubernetes Secrets store sensitive data (passwords, API tokens, SSH keys, TLS certs).
Prevents hardcoding sensitive info in Pod manifests.
By default: values are base64 encoded (⚠️ not encrypted).
With proper configuration, they can be encrypted at rest in etcd.

🔹 Types of Secrets
- Opaque – default, arbitrary key-value pairs.
- docker-registry – stores credentials for private registries.
- tls – stores TLS certs and private keys.
- ServiceAccount tokens – automatically created for service accounts.

🔹 Creating Secrets

1. Imperative
kubectl create secret generic db-secret \
  --from-literal=username=admin \
  --from-literal=password=secret123

2. From File
kubectl create secret generic ssh-key-secret \
  --from-file=ssh-privatekey=~/.ssh/id_rsa \
  --from-file=ssh-publickey=~/.ssh/id_rsa.pub

3. Declarative YAML
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
type: Opaque
data:
  username: YWRtaW4=        # base64 of "admin"
  password: c2VjcmV0MTIz    # base64 of "secret123"

Encode using:
echo -n "admin" | base64
echo -n "secret123" | base64

🔹 Using Secrets in Pods

1. As Environment Variables
apiVersion: v1
kind: Pod
metadata:
  name: secret-env-pod
spec:
  containers:
    - name: app
      image: alpine
      command: ["sleep", "3600"]
      env:
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: username
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: password

2. As Volume Mount
apiVersion: v1
kind: Pod
metadata:
  name: secret-vol-pod
spec:
  containers:
    - name: app
      image: alpine
      command: ["sleep", "3600"]
      volumeMounts:
        - name: secret-volume
          mountPath: "/etc/secret-data"
          readOnly: true
  volumes:
    - name: secret-volume
      secret:
        secretName: db-secret

Inside Pod:
ls /etc/secret-data
cat /etc/secret-data/username
cat /etc/secret-data/password

3. Mounting Specific Keys
volumes:
  - name: custom-secret
    secret:
      secretName: db-secret
      items:
        - key: username
          path: my-user.txt

🔹 Using Secrets for Private Docker Registries
kubectl create secret docker-registry regcred \
  --docker-server=myregistry.io \
  --docker-username=myuser \
  --docker-password=mypassword \
  --docker-email=myemail@example.com

Use in a Pod via imagePullSecrets
apiVersion: v1
kind: Pod
metadata:
  name: private-reg-pod
spec:
  containers:
    - name: private-app
      image: myregistry.io/myapp:1.0
  imagePullSecrets:
    - name: regcred

Set Default for a Namespace:
kubectl patch serviceaccount default -n my-namespace \
  -p '{"imagePullSecrets": [{"name": "regcred"}]}'

🔹 SecretRefs and SecretKeyRefs
secretKeyRef → Used inside container env to pull a single key from a Secret.
env:
  - name: DB_PASS
    valueFrom:
      secretKeyRef:
        name: db-secret
        key: password

secretRef → Used in resources like envFrom, to pull all keys from a Secret.
envFrom:
  - secretRef:
      name: db-secret

🔹 Secret vs ConfigMap

Feature               | ConfigMap | Secret
----------------------|-----------|-------
Sensitive Data        | ❌ No     | ✅ Yes
Encoding              | Plaintext | Base64
Encryption at rest    | ❌ Optional | ✅ Possible
Typical Use Cases     | App configs | Passwords, API keys, certs

🔹 Security Best Practices
- Enable Encryption at Rest in EncryptionConfiguration.
- Restrict access via RBAC.
- Rotate secrets regularly.
- Use External Secret Managers (Vault, AWS, Azure, GCP).
- Never check Secrets into Git repos.

✅ Summary
- Secrets are for sensitive data.
- Use secretKeyRef for specific values, secretRef for all values.
- Use imagePullSecrets for private registry authentication.
- Always combine with RBAC, encryption, and external secret stores in production.
