KUBERNETES DEPLOYMENTS - DETAILED EXPLANATION

1. What is a Deployment?
-------------------------
- A Deployment is a higher-level Kubernetes object that manages ReplicaSets and Pods.
- It provides declarative updates for Pods and ReplicaSets.
- Ensures that the desired number of Pods are always running, and manages rollouts, rollbacks, and scaling.

2. Key Features of Deployments
-------------------------------
- Declarative Pod Management: You define the desired state (e.g., 3 replicas, container image v2), and Kubernetes ensures reality matches.
- Rolling Updates: Automatically update Pods to a new version gradually, ensuring zero downtime.
- Rollbacks: Revert to a previous version if something goes wrong during an update.
- Scaling: Easily scale applications up or down by changing replica count.
- Self-Healing: If Pods fail or nodes go down, Deployment ensures replacement Pods are created.

3. Deployment YAML Structure
-----------------------------
Example:
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.25
        ports:
        - containerPort: 80

Explanation:
- apiVersion: apps/v1 → Deployments belong to apps API group.
- kind: Deployment → Resource type.
- metadata.name → Deployment name.
- spec.replicas → Number of Pods.
- selector.matchLabels → Matches Pods managed by this Deployment.
- template → Pod template (like a Pod definition).
- containers → Defines container specs, images, ports, etc.

4. Deployment Lifecycle
------------------------
1. You create or update a Deployment YAML.
2. Kubernetes creates/updates the ReplicaSet.
3. ReplicaSet ensures the correct number of Pods run.
4. Deployment manages rollouts and ensures state matches desired spec.

5. Deployment Strategies
-------------------------
- RollingUpdate (default): Updates Pods gradually. Ensures availability during upgrade.
- Recreate: Terminates all old Pods first, then creates new Pods.

RollingUpdate parameters:
- maxUnavailable: Maximum Pods that can be unavailable during update.
- maxSurge: Extra Pods allowed temporarily during update.

6. Commands to Work with Deployments
------------------------------------
# Create a Deployment
kubectl apply -f deployment.yaml

# List Deployments
kubectl get deployments

# Get detailed info
kubectl describe deployment nginx-deployment

# Scale Deployment
kubectl scale deployment nginx-deployment --replicas=5

# Update image (rolling update)
kubectl set image deployment/nginx-deployment nginx=nginx:1.26

# Rollout status
kubectl rollout status deployment/nginx-deployment

# Rollback to previous version
kubectl rollout undo deployment/nginx-deployment

7. Difference Between Deployment, ReplicaSet, and Pod
------------------------------------------------------
- Pod: Smallest deployable unit. Runs containers.
- ReplicaSet: Ensures a specific number of Pod replicas run.
- Deployment: Manages ReplicaSets and provides declarative updates, rollouts, and rollbacks.

8. Use Cases of Deployments
----------------------------
- Running stateless applications (web servers, APIs).
- Scaling workloads dynamically.
- Zero-downtime application upgrades.
- Quick rollbacks on failures.
- Multi-environment deployments (dev, test, prod).

------------------------------------------------------
Summary:
- Deployments are the recommended way to run stateless applications in Kubernetes.
- They simplify management of Pods and ReplicaSets with powerful features like rolling updates and rollbacks.
------------------------------------------------------
