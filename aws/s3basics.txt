s3_content = """
AWS S3 (Simple Storage Service) - Summary & Step-by-Step Guide
==============================================================

📦 What is AWS S3?
-------------------
S3 is Amazon's object storage service designed to store and retrieve any amount of data from anywhere on the web.

Key Concepts:
- Bucket: Container for storing objects.
- Object: File (data + metadata) stored in S3.
- Key: Unique identifier for each object.
- Region: Physical AWS region where the bucket is created.

🛠 Key Features (Brief)
-----------------------
- Storage Classes: Standard, IA, Glacier, Intelligent-Tiering.
- Encryption: SSE-S3, SSE-KMS, client-side.
- Lifecycle Policies: Automate archival/deletion.
- Access: IAM Policies, Bucket Policies, ACLs.
- Versioning: Maintain multiple versions of objects.
- Presigned URLs: Temporary object access.

✅ Steps to Create a Standard S3 Bucket (via AWS Console)
----------------------------------------------------------
1. Go to S3 Console → Click "Create bucket"
2. Bucket name: Must be globally unique
3. AWS Region: Choose where to store your data
4. Object Ownership: Recommended – "ACLs disabled" (Bucket owner enforced)
5. Block Public Access settings:
   - Leave all options enabled (default) unless you want to make the bucket public
6. Bucket Versioning: Enable if you want version control
7. Tags, Encryption, and Advanced settings: Optional
8. Click "Create bucket"

📤 Uploading Objects
---------------------
1. Open the bucket → Click "Upload"
2. Click "Add files" or "Add folder"
3. Set storage class (default: Standard)
4. Set encryption if needed
5. Permissions tab:
   - To make the object public: Uncheck "Block all public access" at bucket level first
   - Under "Manage public permissions", select "Grant public read access"
6. Click "Upload"

🔓 Making Objects Public (Carefully)
------------------------------------
1. Disable "Block all public access" at the bucket level:
   - Go to bucket → Permissions → Block Public Access → Edit
   - Uncheck "Block all public access" → Acknowledge → Save

2. Set object-level public permissions:
   - Select the object → Actions → Make public (or)
   - Use ACL: Grant read permission to "Everyone"

3. Optional: Use a bucket policy for public access:
Example:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "PublicReadGetObject",
      "Effect": "Allow",
      "Principal": "*",
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::your-bucket-name/*"
    }
  ]
}

📄 ACLs (Access Control Lists)
------------------------------
- Legacy method for granting access at object level.
- Can grant read/write permissions to AWS accounts or public.
- Not recommended for most new applications (use policies instead).

🔐 Best Practices
------------------
- Keep "Block all public access" enabled unless required
- Use bucket policies for consistent access control
- Enable versioning and encryption
- Use IAM roles and least privilege access

###############################################

additional_policy_versioning = """
Bucket Policy and Object Versioning Notes
==========================================

🔐 Public Access and Bucket Policy
-----------------------------------
- When you allow public access through the S3 console (e.g., during upload or enabling static website hosting), 
  AWS may automatically create a bucket policy behind the scenes.
- This policy grants public read (`s3:GetObject`) permission to all objects in the bucket.
- You can view or modify this policy under:
  S3 Console → Your Bucket → Permissions → Bucket Policy

Example (automatically generated policy):
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "PublicReadGetObject",
      "Effect": "Allow",
      "Principal": "*",
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::your-bucket-name/*"
    }
  ]
}

- No need to manually write this unless you want more control or restrictions.

🗃️ Object Versioning (If Enabled)
-----------------------------------
- Versioning allows you to keep multiple versions of an object in the same bucket.
- This helps prevent accidental data loss or overwriting files.

Benefits:
- Retrieve or restore old versions of files
- Recover from accidental deletions
- Audit changes

How to Enable:
- When creating the bucket, under "Bucket Versioning", choose "Enable"
- Can also enable later from:
  Bucket → Properties → Bucket Versioning → Enable

Important Notes:
- All versions of an object consume storage (billed separately)
- Deleting an object just adds a "delete marker"; older versions still exist

Use Cases:
- Safe backup for website content
- Change tracking for uploaded files
