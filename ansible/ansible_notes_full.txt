
# Ansible Concepts & Documentation

## 1. Introduction to Ansible
Ansible is an open-source IT automation and configuration management tool. It helps in automating provisioning, configuration management, application deployment, orchestration, and security patching.

**Key Features:**
- Agentless: Uses SSH for communication, no agent software required on nodes.
- Simple syntax: Uses YAML-based playbooks.
- Scalable: Works across thousands of machines simultaneously.
- Idempotent: Ensures the same results are applied regardless of how many times a playbook runs.

**Benefits of Ansible:**
1. Simple setup and usage (agentless, only SSH needed).
2. Uses human-readable YAML playbooks.
3. Large library of modules for managing infrastructure and applications.
4. Cross-platform support (Linux, Windows, network devices, cloud platforms).
5. No central server required (though Ansible Tower/AWX adds enterprise features).

---

## 2. Comparison: Ansible vs Puppet vs Terraform

**Ansible:**
- Agentless, uses SSH.
- Procedural + declarative (playbooks define tasks step-by-step).
- Suitable for configuration management, deployments, orchestration.

**Puppet:**
- Requires agents on managed nodes (though agentless options exist).
- Declarative DSL (Domain Specific Language).
- More complex setup and learning curve.
- Good for configuration management at scale.

**Terraform:**
- Infrastructure as Code (IaC) tool.
- Declarative approach using HCL (HashiCorp Configuration Language).
- Focused on provisioning infrastructure (VMs, networks, cloud resources).
- Not a configuration management tool like Ansible or Puppet.

**Summary:**
- Use **Terraform** for infrastructure provisioning.
- Use **Ansible/Puppet** for configuration management and software automation.
- Ansible is simpler and agentless, Puppet is more complex but powerful in large environments.

---

## 3. Ansible Installation on Ubuntu

**Step 1: Update system**
```bash
sudo apt update
```

**Step 2: Install Ansible**
```bash
sudo apt install ansible -y
```

**Step 3: Verify installation**
```bash
ansible --version
```

---

## 4. Control Node and Managed (Agent) Nodes

- **Control Node:** The machine where Ansible is installed and playbooks are executed.
- **Managed Nodes (Agent Nodes):** The machines being configured by Ansible. No agent is required, only SSH access.

üëâ Ansible communicates with managed nodes over SSH using public/private key authentication.

---

## 5. Inventory in Ansible

The inventory file defines the list of managed nodes. By default, it is located at:
`/etc/ansible/hosts`

‚ö†Ô∏è **Default inventory file is not recommended** for large setups. It's better to create a custom inventory file and use the `-i` flag when running ansible.

**Inventory Formats:**

### 1. INI Format (default)
```ini
[web]
web01 ansible_host=192.168.1.10
web02 ansible_host=192.168.1.11

[db]
db01 ansible_host=192.168.1.20
```

### 2. YAML Format
```yaml
all:
  hosts:
    web01:
      ansible_host: 192.168.1.10
    web02:
      ansible_host: 192.168.1.11
  children:
    db:
      hosts:
        db01:
          ansible_host: 192.168.1.20
```

---

## 6. Ansible Configuration File (`ansible.cfg`)

**Purpose:**
- Allows customizing Ansible‚Äôs behavior (inventory location, roles path, SSH settings, host key checking, etc.).

**Default locations (searched in order):**
1. `ANSIBLE_CONFIG` (environment variable if set)
2. `./ansible.cfg` (project directory)
3. `~/.ansible.cfg` (user home directory)
4. `/etc/ansible/ansible.cfg` (system-wide)

**Example `ansible.cfg`:**
```ini
[defaults]
inventory = ./inventory
remote_user = ubuntu
host_key_checking = False
```

**Explanation:**
- `inventory`: Defines custom inventory file location.
- `remote_user`: Default user for SSH.
- `host_key_checking`: If True, SSH will verify host keys before connecting. Setting it to False is useful in dynamic environments but less secure.

---

## 7. Basics of Ansible Playbooks

- Playbooks are **YAML files** that define automation tasks.
- Each playbook contains **plays** (mapping hosts to tasks).

**Example playbook (install nginx):**
```yaml
---
- name: Install and start Nginx
  hosts: web
  become: yes
  tasks:
    - name: Install Nginx
      apt:
        name: nginx
        state: present
        update_cache: yes

    - name: Start Nginx service
      service:
        name: nginx
        state: started
        enabled: yes
```

---

## 8. Summary

- Ansible is simple, agentless, and uses SSH.
- Control Node runs playbooks, Managed Nodes are targets.
- Inventory files define hosts (INI or YAML formats).
- Configuration file (`ansible.cfg`) customizes behavior.
- Playbooks are YAML-based and describe automation tasks.

üëâ Use **Ansible** for configuration management, deployments, and orchestration.
üëâ Use **Terraform** for infrastructure provisioning.
üëâ Use **Puppet** for complex enterprise configuration management.

