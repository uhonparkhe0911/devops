def COLOR_MAP = [
    'SUCCESS': 'GREEN',
    'FAILURE': 'RED',
    'UNSTABLE': 'YELLOW',
    'ABORTED': 'GRAY'
]

pipeline {
    agent any

    tools {
        maven 'MAVEN3.9'
        jdk 'JDK17'
    }

    environment {
        registryCredential = 'ecr:us-east-1:awscreds'
        imageName = "913524927534.dkr.ecr.us-east-1.amazonaws.com/vprofileappimg"
        vprofileRegistry = "https://913524927534.dkr.ecr.us-east-1.amazonaws.com"
        cluster = "clustername"
        service = "servicename"
        
    }

    stages {
        stage('Fetch code') {
            steps {
                git branch: 'docker', url: 'https://github.com/hkhcoder/vprofile-project.git' 
            }
        }

        stage('Build') {
            steps {
                sh 'mvn install -DskipTests' 
            }
            post {
                success{
                    echo "Archiving artifact"
                    archiveArtifacts artifacts: '**/*.war', fingerprint: true
                }
            }
        }

        stage('Unit Test') {
            steps {
                sh 'mvn test' 
            }
        }

        stage('Checkstyle Analysis') {
            steps {
                sh 'mvn checkstyle:checkstyle' 
            }
        }

        stage('Build Image (Docker Plugin)') {
            steps {
                script {
                    // Build using Docker plugin instead of manual sh
                    app = docker.build( imageName + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
                }
            }
        }

        stage('Tag & Push Image to ECR') {
            steps {
                script {
                    docker.withRegistry( vprofileRegistry, registryCredential) {
                        app.push("$BUILD_NUMBER")
                        app.push('latest')  // optional latest tag
                    }
                }
            }
        }

        stage('Remove Container Images') {
            steps {
                sh 'docker rmi -f $(docker images -a -q)'
            }
        }
    }

    post {
        success {
            echo "✅ Image pushed successfully: ${ECR_URL}/${ECR_REPO_NAME}:${BUILD_NUMBER}"
        }
        failure {
            echo "❌ Build failed! Please check logs."
        }
    }
}