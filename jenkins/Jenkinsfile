def COLOR_MAP = [
    'SUCCESS': 'GREEN',
    'FAILURE': 'RED',
    'UNSTABLE': 'YELLOW',
    'ABORTED': 'GRAY'
]

pipeline {
    agent any

    tools {
        maven 'MAVEN3.9'
        jdk 'JDK17'
    }

    environment {
        scannerHome = tool 'sonar6.2'
    }

    stages {
        stage('Fetch code') {
            steps {
                git branch: 'atom', url: 'https://github.com/hkhcoder/vprofile-project.git' 
            }
        }

        stage('Build') {
            steps {
                sh 'mvn install -DskipTests' 
            }
            post {
                success{
                    echo "Archiving artifact"
                    archiveArtifacts artifacts: '**/*.war', fingerprint: true
                }
            }
        }

        stage('Unit Test') {
            steps {
                sh 'mvn test' 
            }
        }

        stage('Checkstyle Analysis') {
            steps {
                sh 'mvn checkstyle:checkstyle' 
            }
        }

        stage('SonarQube Analysis') {
            steps {
                // Use the SonarQube environment configured in Jenkins
                withSonarQubeEnv('sonarserver') {
                    // Run the SonarQube Scanner
                    sh '''${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectName=vprofile \
                        -Dsonar.projectKey=vprofile \
                        -Dsonar.projectVersion=1.0 \
                        -Dsonar.sources=src/ \
                        -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                        -Dsonar.junit.reportPaths=target/surefire-reports \
                        -Dsonar.jacoco.reportPaths=target/jacoco.exec \
                        -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        // stage('Upload Artifact to Nexus') {
        //     steps {
        //         nexusArtifactUploader(
        //             nexusVersion: 'nexus3',
        //             protocol: 'http',
        //             nexusUrl: '172.31.18.28:8081',
        //             groupId: 'com.devops.jenkinstest',
        //             version: '${env.BUILD_ID}-${env.BUILD_TIMESTAMP}',
        //             repository: 'vprofile-repo',
        //             credentialsId: 'nexuslogin',
        //             artifacts: [
        //                 [
        //                     artifactId: 'vproapp',
        //                     classifier: '',
        //                     file: 'target/vprofile-v2.war',
        //                     type: 'war'
        //                 ]
        //             ]
        //         )
        //     }

        // }
       
    }

    //Post Actions
    post {
        always {
            echo 'Slack notifications.'
            slackSend (
                channel: '#devops-cicd',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build [${env.BUILD_NUMBER}].\n"
            )
        }
    }
}