JENKINS FREESTYLE JOBS VS PIPELINE AS CODE
=================================================

INTRODUCTION
-------------
Jenkins provides two main ways to define and manage builds:

1️⃣ **Freestyle Jobs** — Simple UI-based configurations.
2️⃣ **Pipeline as Code** — Code-driven, version-controlled automation using a Jenkinsfile.

Both are used to build, test, and deploy applications — but differ in flexibility, scalability, and maintainability.

------------------------------------------------------
FREESTYLE JOBS
------------------------------------------------------

✅ **Overview**
A Freestyle Job is the traditional, GUI-based job type in Jenkins.  
You configure all settings through the Jenkins web interface — no coding required.

✅ **Key Features**
- Simple to set up
- Best suited for small projects or single-step builds
- Configured via Jenkins web UI
- Limited flexibility for complex workflows

✅ **Configuration Steps**
1. Go to Jenkins Dashboard → “New Item”
2. Select **Freestyle Project**
3. Configure:
   - Source Code Management (Git, SVN, etc.)
   - Build Triggers (SCM polling, schedule, webhook)
   - Build Steps (Execute shell, Invoke Maven, etc.)
   - Post-build actions (Archive artifacts, email notifications, etc.)
4. Save and Build

✅ **Example Use Case**
- Build and test a simple Java project
- Run a shell command like `mvn clean install`
- Send notification emails on build completion

✅ **Advantages**
- Easy to configure — no scripting needed
- Good for beginners or simple pipelines
- Quick setup for one-off automation

✅ **Disadvantages**
- Hard to reproduce or version-control
- Difficult to maintain as project grows
- Cannot handle complex workflows (loops, conditionals, parallelism)
- Manual configuration is prone to human error

------------------------------------------------------
PIPELINE AS CODE
------------------------------------------------------

✅ **Overview**
"Pipeline as Code" means defining the entire build, test, and deploy process in code — usually through a `Jenkinsfile`.

This file is stored in your project repository (e.g., GitHub) and executed by Jenkins automatically.

✅ **Key Features**
- Configuration written in code (Declarative or Scripted)
- Stored and versioned along with your source code
- Supports conditionals, loops, parallel stages, etc.
- Allows automation of multi-branch CI/CD workflows
- Enables reusable, modular pipelines via Shared Libraries

✅ **Structure of a Jenkinsfile (Declarative Example)**

pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/example/myapp.git'
            }
        }
        stage('Build') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Deploy') {
            steps {
                sh 'docker build -t myapp:latest .'
                sh 'docker run -d -p 8080:8080 myapp:latest'
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
    }
}

✅ **Advantages**
- Fully automated and repeatable
- Easily version-controlled along with code
- Reusable via Shared Libraries
- Supports parallel, conditional, and complex logic
- Suitable for enterprise-scale CI/CD pipelines

✅ **Disadvantages**
- Requires scripting knowledge (Groovy or Declarative syntax)
- Slightly more setup effort compared to Freestyle
- Debugging syntax errors may take time

------------------------------------------------------
KEY DIFFERENCES
------------------------------------------------------

| Feature                        | Freestyle Job                    | Pipeline as Code (Jenkinsfile)      |
|--------------------------------|----------------------------------|------------------------------------|
| Setup Method                   | UI-based manual configuration    | Code-based configuration            |
| Storage                        | Jenkins master only              | Stored in SCM repository            |
| Reusability                    | Limited                          | High — can use Shared Libraries     |
| Version Control                | Not supported                    | Fully supported                     |
| Complexity Handling             | Basic                            | Handles complex workflows           |
| Flexibility                    | Low                              | High                                |
| Parallel Execution             | No                               | Yes                                |
| Error Recovery                 | Manual rerun                     | Built-in post/error handling        |

------------------------------------------------------
WHEN TO USE WHICH
------------------------------------------------------
✅ **Use Freestyle Jobs when:**
- You’re testing Jenkins for the first time
- You need to run simple commands or scripts
- Your workflow is small and non-repetitive

✅ **Use Pipeline as Code when:**
- You need automation with build/test/deploy steps
- You want pipelines tracked in version control
- You require CI/CD with multiple stages and logic
- You want scalable and reusable pipelines

------------------------------------------------------
TRANSITION FROM FREESTYLE TO PIPELINE
------------------------------------------------------
1. Export your Freestyle job’s shell or build commands.
2. Create a `Jenkinsfile` in your repo.
3. Move all stages (build/test/deploy) into pipeline stages.
4. Configure Jenkins to use **“Pipeline script from SCM”**.
5. Commit the Jenkinsfile to version control.

------------------------------------------------------
SUMMARY
------------------------------------------------------
Freestyle Jobs are great for small, manual setups.  
Pipeline as Code (Jenkinsfile) is the modern, scalable, and maintainable approach — enabling full CI/CD automation.

------------------------------------------------------
End of Document
------------------------------------------------------
